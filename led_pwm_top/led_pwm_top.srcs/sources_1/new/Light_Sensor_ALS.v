module Light_Sensor_ALS(
	w_Rst_L,
	i_Clk,
	i_SPI_MISO,
	w_Ambient_Val,
	o_SPI_Clk,
	o_SPI_MOSI,
	o_SPI_CS_n);

	//----Parameters:: generated by Robei-----
	parameter SPI_MODE = 3;
	parameter CLKS_PER_HALF_BIT = 10;
	parameter CS_INACTIVE_CLKS = 100;

	//---Ports declearation: generated by Robei---
	input w_Rst_L;
	input i_Clk;
	input i_SPI_MISO;
	output [7:0] w_Ambient_Val;
	output o_SPI_Clk;
	output o_SPI_MOSI;
	output o_SPI_CS_n;

	wire w_Rst_L;
	wire i_Clk;
	wire i_SPI_MISO;
	wire [7:0] w_Ambient_Val;
	wire o_SPI_Clk;
	wire o_SPI_MOSI;
	wire o_SPI_CS_n;

	//----Code starts here: integrated by Robei-----
	
	//  wire w_Rst_L;
	
	  // SPI Signals
	  wire [1:0] w_Master_RX_Count;
	  wire w_Master_RX_DV;
	  wire [7:0] w_Master_RX_Byte;
	  wire w_Master_TX_Ready;
	  reg r_Master_TX_DV;
	
	//  reg r_LED_Enable;
	//  reg [7:0] r_LED_Count; 
	//  wire [7:0] w_Ambient_Val;
	//	reg [7:0]	w_Ambient_Val;
	
	  reg [15:0] r_ADC_Word;
	
	  // Purpose: Handle read requests from ADC.
	  // Just request data as often as possible
	  always @(posedge i_Clk)
	  begin
	    r_Master_TX_DV <= w_Master_TX_Ready;
	  end
	
	
	   // Purpose: Handle data being read back from SPI 处理从SPI读回的数据 
	   // Pack up response into a single 8-bit value for ambient light. 将响应打包成环境光的单个8位值。
	  always @(posedge i_Clk)
	  begin
	    if (w_Master_RX_DV)
	    begin
	      if (w_Master_RX_Count == 0)
	      begin
	        r_ADC_Word[15:8] <= w_Master_RX_Byte;
	      end
	      else
	      begin
	        r_ADC_Word[7:0]  <= w_Master_RX_Byte;
	      end
	    end // if (w_Master_RX_DV)
	  end // always @ (posedge i_Clk)
	
	
	  // Drop first 3 bits and last 5 
	  assign w_Ambient_Val = r_ADC_Word[12:5];
	
	//---Module instantiation---
	SPI_Master_With_Single_CS #( SPI_MODE, CLKS_PER_HALF_BIT, 2, CS_INACTIVE_CLKS) SPI_Master_With_Single_CS1(
		.i_Rst_L(w_Rst_L),
		.i_Clk(i_Clk),
		.i_TX_Count(2'b10),
		.i_TX_Byte(8'h00),
		.i_TX_DV(r_Master_TX_DV),
		.i_SPI_MISO(i_SPI_MISO),
		.o_TX_Ready(w_Master_TX_Ready),
		.o_RX_Count(w_Master_RX_Count),
		.o_RX_DV(w_Master_RX_DV),
		.o_RX_Byte(w_Master_RX_Byte),
		.o_SPI_Clk(o_SPI_Clk),
		.o_SPI_MOSI(o_SPI_MOSI),
		.o_SPI_CS_n(o_SPI_CS_n));

endmodule    //Light_Sensor_ALS

